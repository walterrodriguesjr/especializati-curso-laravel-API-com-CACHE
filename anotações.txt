01-config setup 


01-instalar laravel em ambiente docker
-usado template próprio
-configurado .ENV, criado e conectado banco de dados para o projeto 
-resetado o repositório GIT e iniciado um próprio 
    rm -rf .git/
    git init

02-versionar projeto laravel com Git  e armazenar no github 
-feito o primeiro commit 

03-usar o redis no laravel 
-torna o processo otimizado 
-alterações para redis no .env: 
    CACHE_DRIVER=redis
    QUEUE_CONNECTION=redis
    SESSION_DRIVER=redis
    REDIS_HOST=redis

04-acessar banco de dados Docker pelo Mysql workbench 
-erro de conexão com mysql workbench, solução: 
    O outro erro é de SSL "ssl connection error" e resolve:
    Acesse a aba Advanced/Avançada (dentro das conexões), no campo Others/Outros coloque: useSSL=0
-conectado 
-erro das migrations, sempre rodar anteS: 
    php artisan config:clear

05-instalar e configurar o laravel telescope 
-telescope serve para monitorar as requisições de maneira mais detalhada 
-composer require laravel/telescope
-php artisan telescope:install
-para acessar: 
    http://127.0.0.1:8989/telescope/requests 

06-configurações de rotas no laravel 
-em RouteServiceProvider, no método boot(), retira o Route web, e do api, retira o prefix 
-php artisan route:cache
-Route get de '/'


02-APIs da EAD 


01-criar model e migration de cursos no laravel 
-criando e configurando model e migration de Course 
    php artisan make:model Course -m
-rodada a migration 

02-laravel com repositories + service layers + resources + request 
-criando o controller de Course 
    php artisan make:controller Api//CourseController --api
        criado no padrão resource, métodos de CRUD inclusos
-criado em app, o diretório Services, e dentro o arquivo CourseService.php 
    este irá conter toda a lógica de banco(1-mais simples)
-criado em app, o diretório Repositories, e dentro o arquivo CourseRepository.php 
    este irá conter toda a lógica de banco(2-mais indicada, mais complexa)
-o controller padrão de CourseController irá chamar por Services, que, 
    por sua vez chama o Repositories 
-criado método __contruct em CourseController 
-em api.php, implementado as routes padrão 
-para padronizar todos os retornos de Course, criado um arquivo 
    CourseResource 
    php artisan make:resource CourseResource
-O CourseController não executada lógica de consulta diretamente, 
    ele chama um método de Service, que então chamará um método 
    de Repository exclusivo de consulta de model 

03-API de registros de cursos no laravel 
-




